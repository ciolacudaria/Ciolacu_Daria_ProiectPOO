//Domeniul ales este comanda.

#include<iostream>
using namespace std;
using namespace std;

class ProdusComandat;

class Magazin
{
private:
	static string localizare;
	const int idMagazin;
	char* numeMagazin;
	string adresa;
	int numarProduseVandute;
	string* produseVandute;
public:
	Magazin() :idMagazin(1)
	{
		this->numeMagazin = new char[strlen("No Name") + 1];
		strcpy_s(numeMagazin, strlen("No Name") + 1, "No Name");
		this->adresa = "Lume";
		this->numarProduseVandute = 0;
		this->produseVandute = NULL;
	}

	Magazin(int idMagazin, char* numeMagazin, string adresa, int numarProduseVandute, string* produseVandute) :idMagazin(idMagazin) {
		int i;
		this->numeMagazin = new char[strlen(numeMagazin) + 1];
		strcpy_s(this->numeMagazin, strlen(numeMagazin) + 1, numeMagazin);
		this->adresa = adresa;
		this->numarProduseVandute = numarProduseVandute;
		this->produseVandute = new string[numarProduseVandute];
		for (i = 0; i < numarProduseVandute; i++)
			this->produseVandute[i] = produseVandute[i];
	}

	Magazin(const Magazin& m) :idMagazin(m.idMagazin) {
		int i;
		this->numeMagazin = new char[strlen(m.numeMagazin) + 1];
		strcpy_s(this->numeMagazin, strlen(m.numeMagazin) + 1, m.numeMagazin);
		this->adresa = m.adresa;
		this->numarProduseVandute = m.numarProduseVandute;
		this->produseVandute = new string[numarProduseVandute];
		for (i = 0; i < numarProduseVandute; i++)
			this->produseVandute[i] = m.produseVandute[i];
	}

	Magazin(string adresa) :idMagazin(25) {
		this->numeMagazin = new char[strlen("No Name") + 1];
		strcpy_s(numeMagazin, strlen("No Name") + 1, "No Name");
		this->adresa = adresa;
		this->numarProduseVandute = 0;
		this->produseVandute = NULL;
	}

	~Magazin() {
		if (numeMagazin != NULL)
			delete[]this->numeMagazin;
		if (produseVandute != NULL)
			delete[]this->produseVandute;
	}

	static void setLocalizareMagazin(string localizare) {
		Magazin::localizare = localizare;
	}

	static string getLocalizareMagazin() {
		return Magazin::localizare;
	}

	const int getIdMagazin() {
		return this->idMagazin;
	}

	void setNumeMagazin(char* numeMagazin) {
		if (this->numeMagazin != NULL)
			delete[]this->numeMagazin;
		this->numeMagazin = new char[strlen(numeMagazin) + 1];
		strcpy_s(this->numeMagazin, strlen(numeMagazin) + 1, numeMagazin);
	}

	char* getNumeMagazin() {
		return this->numeMagazin;
	}

	void setAdresa(string adresa) {
		this->adresa = adresa;
	}

	string getAdresa() {
		return this->adresa;
	}

	void setNrProduseVandute(int nrProduseVandute, string* produseVandute)
	{
		if (nrProduseVandute != 0) {
			int i;
			this->numarProduseVandute = nrProduseVandute;
			if (this->produseVandute != NULL)
				delete[]this->produseVandute;
			this->produseVandute = new string[this->numarProduseVandute];
			for (i = 0; i < this->numarProduseVandute; i++)
				this->produseVandute[i] = produseVandute[i];
		}
	}

	int getNumarProduseVandute() {
		return this->numarProduseVandute;
	}

	string getProduseVandute(int i) {
		if (i >= 0 && i < this->numarProduseVandute)
			return produseVandute[i];
	}

	void afisare() {
		int i;
		cout << "Magazinul " << numeMagazin << " are id-ul " << idMagazin << ", se afla la adresa din strada " << adresa << ", pe planeta " << localizare << " si vinde urmatoarele produse: " << endl;
		if (this->numarProduseVandute == 0)
			cout << "-";
		else {
			for (i = 0; i < numarProduseVandute; i++)
				cout << produseVandute[i] << " ";
		}
		cout << "." << endl;
	}

	static void careEsteLocalizarea() {
		cout << "Magazinele se afla pe planeta " << Magazin::localizare;
	}

	friend void AdaugaProdus(Magazin& magazin, string produs);


	const Magazin& operator=(const Magazin& magazin)
	{
		if (this != &magazin) {
			if (this->numeMagazin != NULL)
				delete[]this->numeMagazin;
			this->numeMagazin = new char[strlen(magazin.numeMagazin) + 1];
			strcpy_s(this->numeMagazin, strlen(magazin.numeMagazin) + 1, magazin.numeMagazin);
			this->adresa = magazin.adresa;
			this->numarProduseVandute = magazin.numarProduseVandute;
			if (this->produseVandute != NULL)
				delete[]this->produseVandute;
			this->produseVandute = new string[this->numarProduseVandute];
			for (int i = 0; i < this->numarProduseVandute; i++)
				this->produseVandute[i] = magazin.produseVandute[i];
		}
		return *this;
	}


	string& operator[](int i)
	{
		if (i >= 0 && i < this->numarProduseVandute)
			return this->produseVandute[i];
	}

	friend ostream& operator<<(ostream& monitor, const Magazin& magazin)
	{
		int i;
		monitor << "Magazinul " << magazin.numeMagazin << " are id-ul " << magazin.idMagazin << ", se afla la adresa din strada " << magazin.adresa << ", pe planeta " << magazin.localizare << " si vinde urmatoarele produse: " << endl;
		if (magazin.numarProduseVandute == 0)
			monitor << "-";
		else
			for (i = 0; i < magazin.numarProduseVandute; i++)
				monitor << magazin.produseVandute[i] << " ";
		monitor << "." << endl;
		return monitor;
	}

	friend istream& operator>>(istream& taste, Magazin& magazin)
	{
		char nume[100];
		cout << "Numele magazinului este: ";
		taste >> nume;
		if (magazin.numeMagazin != NULL)
			delete[]magazin.numeMagazin;
		magazin.numeMagazin = new char[strlen(nume) + 1];
		strcpy_s(magazin.numeMagazin, strlen(nume) + 1, nume);
		cout << "Adresa magazinului este: ";
		cin >> magazin.adresa;
		cout << "Numarul de produse vandute este: ";
		taste >> magazin.numarProduseVandute;
		if (magazin.produseVandute != NULL)
			delete[]magazin.produseVandute;
		magazin.produseVandute = new string[magazin.numarProduseVandute];
		for (int i = 0; i < magazin.numarProduseVandute; i++)
		{
			cout << "Produsul " << i + 1 << " este: ";
			taste >> magazin.produseVandute[i];
		}
		return taste;
	}


	bool operator<(const Magazin& magazin)
	{
		return this->numarProduseVandute < magazin.numarProduseVandute;
	}

};

string Magazin::localizare = "Pamant";



class Client {
private:
	static int numarClienti;
	const int idClient;
	string numeClient;
	int numarProduseComandate;
	string* produseComandate;
	int* cantitatiProduseComandate;
	bool tipClient;
public:

	Client() :idClient(++numarClienti) {
		this->numeClient = "NoName";
		this->numarProduseComandate = 0;
		this->produseComandate = NULL;
		this->cantitatiProduseComandate = NULL;
		this->tipClient = true;
	}

	Client(string numeClient, int numarProduseComandate, string* produseComandate, int* cantitatiProduseComandate) :idClient(++numarClienti) {
		int i;
		this->numeClient = numeClient;
		this->numarProduseComandate = numarProduseComandate;
		this->produseComandate = new string[numarProduseComandate];
		for (i = 0; i < numarProduseComandate; i++)
			this->produseComandate[i] = produseComandate[i];
		this->cantitatiProduseComandate = new int[numarProduseComandate];
		for (i = 0; i < numarProduseComandate; i++)
			this->cantitatiProduseComandate[i] = cantitatiProduseComandate[i];
		tipClient = true;
	}

	Client(const Client& c) :idClient(c.idClient) {
		int i;
		this->numeClient = c.numeClient;
		this->numarProduseComandate = c.numarProduseComandate;
		this->produseComandate = new string[numarProduseComandate];
		for (i = 0; i < numarProduseComandate; i++)
			this->produseComandate[i] = c.produseComandate[i];
		this->cantitatiProduseComandate = new int[numarProduseComandate];
		for (i = 0; i < numarProduseComandate; i++)
			this->cantitatiProduseComandate[i] = c.cantitatiProduseComandate[i];
		this->tipClient = c.tipClient;
	}

	Client(string numeClient, bool tipClient) :idClient(++numarClienti) {
		this->numeClient = numeClient;
		numarProduseComandate = 0;
		cantitatiProduseComandate = NULL;
		this->tipClient = tipClient;
	}


	~Client() {
		if (produseComandate != NULL)
			delete[]this->produseComandate;
		if (cantitatiProduseComandate != NULL)
			delete[]this->cantitatiProduseComandate;
	}

	static void setNumarClienti(int numarClienti) {
		Client::numarClienti = numarClienti;
	}

	static int getNumarClienti() {
		return Client::numarClienti;
	}

	const int getIdClient() {
		return this->idClient;
	}

	void setNumeClient(string numeClient) {
		this->numeClient = numeClient;
	}

	string getNumeClient() {
		return this->numeClient;
	}

	void setNumarProduseComandate(int numarProduseComandate, string* produseComandate, int* cantitatiProduseComandate) {
		if (numarProduseComandate != 0)
		{
			int i;
			this->numarProduseComandate = numarProduseComandate;
			if (this->produseComandate != NULL)
				delete[]this->produseComandate;
			this->produseComandate = new string[this->numarProduseComandate];
			for (i = 0; i < this->numarProduseComandate; i++)
				this->produseComandate[i] = produseComandate[i];
			if (this->cantitatiProduseComandate != NULL)
				delete[]this->cantitatiProduseComandate;
			this->cantitatiProduseComandate = new int[this->numarProduseComandate];
			for (i = 0; i < this->numarProduseComandate; i++)
				this->cantitatiProduseComandate[i] = cantitatiProduseComandate[i];
		}
	}

	int getNumarProduseComandate() {
		return this->numarProduseComandate;
	}

	string getProduseComandate(int i) {
		if (i >= 0 && i < this->numarProduseComandate)
			return produseComandate[i];
	}

	int getCantitatiProduseComandate(int i) {
		if (i >= 0 && i < this->numarProduseComandate)
			return cantitatiProduseComandate[i];
	}

	void setTipClient(bool tipClient) {
		this->tipClient = tipClient;
	}

	bool getTipClient() {
		return this->tipClient;
	}

	void afisare() {
		int i;
		cout << "Clientul " << this->numeClient << ", are id-ul " << this->idClient << ", a comandat " << this->numarProduseComandate << " produse: ";
		if (this->numarProduseComandate == 0)
			cout << "-";
		else {
			for (i = 0; i < this->numarProduseComandate; i++)
				cout << this->produseComandate[i] << " ";
			cout << ", in urmatoarele cantitati: ";
			for (i = 0; i < this->numarProduseComandate; i++)
				cout << this->cantitatiProduseComandate[i] << " ";
		}
		if (this->tipClient == true)
			cout << ". Clientul este persoana fizica.";
		else
			cout << ". Clientul este persoana juridica.";
		cout << "In total, sunt " << numarClienti << " clienti." << endl;

	}

	static void afiseazaIdClientUrmator() {
		cout << "Clientul urmator o sa aiba ID-ul " << Client::numarClienti + 1 << "." << endl;
	}
	friend void inregistrareComandaNoua(Client& client, ProdusComandat& produs, int cantitate);

	const Client& operator=(const Client& client) {
		if (this != &client)
		{
			this->numeClient = client.numeClient;
			this->numarProduseComandate = client.numarProduseComandate;
			if (this->cantitatiProduseComandate != NULL)
				delete[]this->cantitatiProduseComandate;
			this->cantitatiProduseComandate = new int[this->numarProduseComandate];
			for (int i = 0; i < this->numarProduseComandate; i++)
				this->cantitatiProduseComandate[i] = client.cantitatiProduseComandate[i];
			if (this->produseComandate != NULL)
				delete[]this->produseComandate;
			this->produseComandate = new string[this->numarProduseComandate];
			for (int i = 0; i < this->numarProduseComandate; i++)
				this->produseComandate[i] = client.produseComandate[i];
		}
		return *this;
	}


	const Client operator+(const Client& client) const {
		Client aux = *this;
		aux.numarProduseComandate = this->numarProduseComandate + client.numarProduseComandate;
		if (aux.produseComandate != NULL)
			delete[]aux.produseComandate;
		aux.produseComandate = new string[aux.numarProduseComandate];
		for (int i = 0; i < this->numarProduseComandate; i++)
			aux.produseComandate[i] = this->produseComandate[i];
		for (int i = this->numarProduseComandate; i < aux.numarProduseComandate; i++)
			aux.produseComandate[i] = client.produseComandate[i - this->numarProduseComandate];
		if (aux.cantitatiProduseComandate != NULL)
			delete[]aux.cantitatiProduseComandate;
		aux.cantitatiProduseComandate = new int[aux.numarProduseComandate];
		for (int i = 0; i < this->numarProduseComandate; i++)
			aux.cantitatiProduseComandate[i] = this->cantitatiProduseComandate[i];
		for (int i = this->numarProduseComandate; i < aux.numarProduseComandate; i++)
			aux.cantitatiProduseComandate[i] = client.cantitatiProduseComandate[i - this->numarProduseComandate];
		return aux;
	}


	friend istream& operator>>(istream& taste, Client& client) {
		int n;
		cout << "Numele clientului: ";
		taste >> client.numeClient;
		cout << "Numarul de produse comandate: ";
		taste >> client.numarProduseComandate;
		if (client.produseComandate != NULL)
			delete[]client.produseComandate;
		client.produseComandate = new string[client.numarProduseComandate];
		for (int i = 0; i < client.numarProduseComandate; i++)
		{
			cout << "Produsul " << i + 1 << " comandat este: ";
			taste >> client.produseComandate[i];
		}
		if (client.cantitatiProduseComandate != NULL)
			delete[]client.cantitatiProduseComandate;
		client.cantitatiProduseComandate = new int[client.numarProduseComandate];
		for (int i = 0; i < client.numarProduseComandate; i++)
		{
			cout << "Cantitatea comandata din produsul " << i + 1 << " este: ";
			taste >> client.cantitatiProduseComandate[i];
		}

		cout << "Tipul clientului este (fizic/juridic): ";
		taste >> client.tipClient;
		return taste;

	}

	friend ostream& operator<<(ostream& monitor, const Client& client)
	{
		int i;
		monitor << "Clientul " << client.numeClient << ", are id-ul " << client.idClient << ", a comandat " << client.numarProduseComandate << " produse: ";
		if (client.numarProduseComandate == 0)
			monitor << "-";
		else {
			for (i = 0; i < client.numarProduseComandate; i++)
				monitor << client.produseComandate[i] << " ";
			monitor << ", in urmatoarele cantitati: ";
			for (i = 0; i < client.numarProduseComandate; i++)
				monitor << client.cantitatiProduseComandate[i] << " ";
		}
		if (client.tipClient == true)
			monitor << ". Clientul este persoana fizica.";
		else
			monitor << ". Clientul este persoana juridica.";
		monitor << "In total, sunt " << client.numarClienti << " clienti." << endl;
		return monitor;
	}


	bool operator==(const Client& client) const {
		return this->idClient == client.idClient && this->numeClient == client.numeClient;
	}

};

int Client::numarClienti = 0;



class ProdusComandat {
private:
	static int nrProduseComandate;
	const int idProdus;
	char* numeProdus;
	string numeMagazin;
	float pretProdus;
	int cantitateDisponibila;
	float greutateProdus;

public:
	ProdusComandat() :idProdus(1) {
		this->numeProdus = new char[strlen("No Name") + 1];
		strcpy_s(numeProdus, strlen("No Name") + 1, "No Name");
		this->numeMagazin = "NO NAME";
		this->pretProdus = 0.0;
		this->cantitateDisponibila = 0;
		this->greutateProdus = 0.0;
		nrProduseComandate++;
	}

	ProdusComandat(int idProdus, char* numeProdus, string numeMagazin, float pretProdus, int cantitateDisponibila, float greutateProdus) :idProdus(idProdus) {
		this->numeProdus = new char[strlen(numeProdus) + 1];
		strcpy_s(this->numeProdus, strlen(numeProdus) + 1, numeProdus);
		this->numeMagazin = numeMagazin;
		this->pretProdus = pretProdus;
		this->cantitateDisponibila = cantitateDisponibila;
		this->greutateProdus = greutateProdus;
		nrProduseComandate++;
	}

	ProdusComandat(const ProdusComandat& p) :idProdus(p.idProdus) {
		this->numeProdus = new char[strlen(p.numeProdus) + 1];
		strcpy_s(this->numeProdus, strlen(p.numeProdus) + 1, p.numeProdus);
		this->numeMagazin = p.numeMagazin;
		this->pretProdus = p.pretProdus;
		this->cantitateDisponibila = p.cantitateDisponibila;
		this->greutateProdus = p.greutateProdus;
		nrProduseComandate++;
	}

	ProdusComandat(float pretProdus, int cantitateDisponibila) :idProdus(14) {
		this->numeProdus = new char[strlen("No Name") + 1];
		strcpy_s(numeProdus, strlen("No Name") + 1, "No Name");
		this->numeMagazin = "NO NAME";
		this->pretProdus = pretProdus;
		this->cantitateDisponibila = cantitateDisponibila;
		this->greutateProdus = 4.0;
		nrProduseComandate++;
	}


	~ProdusComandat() {
		if (numeProdus != NULL)
			delete[]this->numeProdus;
	}

	static void setnrProduseComandate(int nrProduseComandate) {
		ProdusComandat::nrProduseComandate = nrProduseComandate;
	}

	static int getNrProduseComandate() {
		return ProdusComandat::nrProduseComandate;
	}

	const int getIdProdus() {
		return this->idProdus;
	}

	void setNumeProdus(char* numeProdus) {
		if (this->numeProdus != NULL)
			delete[]this->numeProdus;
		this->numeProdus = new char[strlen(numeProdus) + 1];
		strcpy_s(this->numeProdus, strlen(numeProdus) + 1, numeProdus);
	}

	char* getNumeProdus() {
		return this->numeProdus;
	}

	void setNumeMagazin(string numeMagazin) {
		this->numeMagazin = numeMagazin;
	}

	string getNumeMagazin() {
		return this->numeMagazin;
	}

	void setPretProdus(float pretProdus) {
		this->pretProdus = pretProdus;
	}

	float getPretProdus() {
		return this->pretProdus;
	}

	void setCantitateDisponibila(int cantitateDisponibila) {
		this->cantitateDisponibila = cantitateDisponibila;
	}

	int getCantitateDisponibila() {
		return this->cantitateDisponibila;
	}

	void setGreutateProdus(float greutateProdus) {
		this->greutateProdus = greutateProdus;
	}

	float getGreutateProdus() {
		return this->greutateProdus;
	}

	void afisare() {
		cout << "Produsul " << numeProdus << " are id-ul " << idProdus << ", pretul de " << pretProdus << " lei si greutatea de " << greutateProdus << " kg. El este disponibil in numar de " << cantitateDisponibila << " bucati si este distribuit de magazinul " << numeMagazin << ". In total au fost inregistrate " << nrProduseComandate << " produse." << endl;
	}

	static void cateProduseComandate() {
		cout << "In prezent au fost comandate " << ProdusComandat::nrProduseComandate << " produse." << endl;
	}

	friend void inregistrareComandaNoua(Client& client, ProdusComandat& produs, int cantitate);


	const ProdusComandat& operator=(const ProdusComandat& produs)
	{
		if (this != &produs) {
			if (this->numeProdus != NULL)
				delete[]this->numeProdus;
			this->numeProdus = new char[strlen(produs.numeProdus) + 1];
			strcpy_s(this->numeProdus, strlen(produs.numeProdus) + 1, produs.numeProdus);
			this->numeMagazin = produs.numeMagazin;
			this->pretProdus = produs.pretProdus;
			this->cantitateDisponibila = produs.cantitateDisponibila;
			this->greutateProdus = produs.greutateProdus;
		}
		return *this;
	}

	ProdusComandat& operator-=(float procent) {
		this->pretProdus -= procent / 100 * this->pretProdus;
		return *this;
	}

	bool operator>(const ProdusComandat& produs) const {
		return this->pretProdus > produs.pretProdus;
	}

	ProdusComandat& operator++() {
		this->cantitateDisponibila++;
		return *this;
	}

	friend istream& operator>>(istream& taste, ProdusComandat& produs)
	{
		char nume[100];
		cout << "Numele produsului este: ";
		taste >> nume;
		if (produs.numeProdus != NULL)
			delete[]produs.numeProdus;
		produs.numeProdus = new char[strlen(nume) + 1];
		strcpy_s(produs.numeProdus, strlen(nume) + 1, nume);
		cout << "Numele magazinului furnizor este: ";
		taste >> produs.numeMagazin;
		cout << "Pretul produsului este: ";
		taste >> produs.pretProdus;
		cout << "Greutatea prodsului este: ";
		taste >> produs.greutateProdus;
		cout << "Cantitate disponibila din produs: ";
		taste >> produs.cantitateDisponibila;
		return taste;
	}

	friend ostream& operator<<(ostream& monitor, const ProdusComandat& produs)
	{
		monitor << "Produsul " << produs.numeProdus << " are id-ul " << produs.idProdus << ", pretul de " << produs.pretProdus << " lei si greutatea de " << produs.greutateProdus << " kg. El este disponibil in numar de " << produs.cantitateDisponibila << " bucati si este distribuit de magazinul " << produs.numeMagazin << ". In total au fost inregistrate " << produs.nrProduseComandate << " produse." << endl;
		return monitor;
	}

};

int ProdusComandat::nrProduseComandate = 0;



void inregistrareComandaNoua(Client& client, ProdusComandat& produs, int cantitate)
{
	string* aux = new string[client.numarProduseComandate + 1];
	int* cantitati = new int[client.numarProduseComandate + 1];
	int i;
	for (i = 0; i < client.numarProduseComandate; i++)
		aux[i] = client.produseComandate[i];
	aux[client.numarProduseComandate] = produs.numeProdus;
	delete[]client.produseComandate;
	client.produseComandate = aux;

	for (i = 0; i < client.numarProduseComandate; i++)
		cantitati[i] = client.cantitatiProduseComandate[i];
	cantitati[client.numarProduseComandate] = cantitate;
	delete[]client.cantitatiProduseComandate;
	client.cantitatiProduseComandate = cantitati;
	client.numarProduseComandate++;
	produs.cantitateDisponibila = produs.cantitateDisponibila - cantitate;

	cout << "Clientul " << client.numeClient << " a comandat un nou produs " << produs.numeProdus << " ce are pretul de " << produs.pretProdus << " lei, in numar de " << cantitate << " bucati.Dupa comanda, au mai ramas in stoc " << produs.cantitateDisponibila << " bucati." << endl;
}



void AdaugaProdus(Magazin& magazin, string produs)
{
	string* aux = new string[magazin.numarProduseVandute + 1];
	int i;
	for (i = 0; i < magazin.numarProduseVandute; i++)
		aux[i] = magazin.produseVandute[i];
	aux[magazin.numarProduseVandute] = produs;
	delete[]magazin.produseVandute;
	magazin.numarProduseVandute++;
	magazin.produseVandute = aux;
}



void main()
{
	int i;
	Magazin magazin1;
	magazin1.afisare();

	char* numemagazin = new char[strlen("Diverta") + 1];
	strcpy_s(numemagazin, strlen("Diverta") + 1, "Diverta");
	string* produseVandute = new string[3];
	produseVandute[0] = "caiet";
	produseVandute[1] = "manual";
	produseVandute[2] = "pix";
	Magazin magazin2(2, numemagazin, "Unirii",3, produseVandute);
	magazin2.afisare();
	delete[]numemagazin;
	delete[]produseVandute;

	Magazin magazin3("Doamnei");
	magazin3.afisare();


	Client client1;
	client1.afisare();

	string* produseComandate = new string[3];
	produseComandate[0] = "carte";
	produseComandate[1] = "manual";
	produseComandate[2] = "pix";
	int* cantitateProduseComandate = new int[3];
	cantitateProduseComandate[0] = 3;
	cantitateProduseComandate[1] = 5;
	cantitateProduseComandate[2] = 10;
	Client client2("Ion", 3, produseComandate, cantitateProduseComandate);
	client2.afisare();
	delete[]produseComandate;
	delete[]cantitateProduseComandate;


	Client client3("Bogdan", false);
	client3.afisare();

	ProdusComandat produs1;
	produs1.afisare();

	char* numeProdus = new char[strlen("caiet") + 1];
	strcpy_s(numeProdus, strlen("caiet") + 1, "caiet");
	ProdusComandat produs2(31, numeProdus, "Diverta", 30.5, 15, 2.65);
	produs2.afisare();
	delete[]numeProdus;

	ProdusComandat produs3(25.6, 4);
	produs3.afisare();


	inregistrareComandaNoua(client2, produs2,2);
	client2.afisare();
	produs2.afisare();


	AdaugaProdus(magazin3, "Revista");
	magazin3.afisare();


	magazin1.setLocalizareMagazin("Marte");
	char* numemagazin1 = new char[strlen("Mango") + 1];
	strcpy_s(numemagazin1, strlen("Mango") + 1, "Mango");
	magazin1.setNumeMagazin(numemagazin1);
	magazin1.setAdresa("Calea Vitan");
	string* produseVandute1 = new string[4];
	produseVandute1[0] = "fusta";
	produseVandute1[1] = "rochie";
	produseVandute1[2] = "pantalon";
	produseVandute1[3] = "tricou";
	magazin1.setNrProduseVandute(4, produseVandute1);
	cout << "Magazinul " << magazin1.getNumeMagazin() << " are id-ul " << magazin1.getIdMagazin() << ", se afla la adresa din strada " << magazin1.getAdresa() << ", pe planeta " << magazin1.getLocalizareMagazin()<< " si vinde urmatoarele produse: " << endl;
	if (magazin1.getNumarProduseVandute() == 0)
		cout << "-";
	else {
		for (i = 0; i < magazin1.getNumarProduseVandute(); i++)
			cout << magazin1.getProduseVandute(i) << " ";
	}
	cout << "." << endl;
	delete[]numemagazin1;
	delete[]produseVandute1;


	client1.setNumarClienti(1);
	client1.setNumeClient("Ioana Avram");
	string* produseComandate1 = new string[3];
	produseComandate1[0] = "crema de ochi";
	produseComandate1[1] = "demachiant";
	produseComandate1[2] = "ruj";
	int* cantitateProduseComandate1 = new int[3];
	cantitateProduseComandate1[0] = 1;
	cantitateProduseComandate1[1] = 3;
	cantitateProduseComandate1[2] = 2;
	client1.setNumarProduseComandate(3, produseComandate1, cantitateProduseComandate1);
	client1.setTipClient(true);
	cout << "Clientul " << client1.getNumeClient() << ", are id - ul " << client1.getIdClient() << ", a comandat " << client1.getNumarProduseComandate() << " produse: ";
	if (client1.getNumarProduseComandate() == 0)
		cout << "-";
	else {
		for (i = 0; i < client1.getNumarProduseComandate(); i++)
			cout << client1.getProduseComandate(i) << " ";
		cout << ", in urmatoarele cantitati: ";
		for (i = 0; i < client1.getNumarProduseComandate(); i++)
			cout << client1.getCantitatiProduseComandate(i) << " ";
	}
	if (client1.getTipClient() == true)
		cout << ". Clientul este persoana fizica.";
	else
		cout << ". Clientul este persoana juridica.";
	cout << "In total, sunt " << client1.getNumarClienti() << " clienti." << endl;
	delete[]produseComandate1;
	delete[]cantitateProduseComandate1;


	produs1.setnrProduseComandate(1);
	char* numeProdus1 = new char[strlen("crema") + 1];
	strcpy_s(numeProdus1, strlen("crema") + 1, "crema");
	produs1.setNumeProdus(numeProdus1);
	produs1.setNumeMagazin("Bebe Tei");
	produs1.setPretProdus(30.5);
	produs1.setCantitateDisponibila(10);
	produs1.setGreutateProdus(0.30);
	cout << "Produsul " << produs1.getNumeProdus() << " are id-ul " << produs1.getIdProdus() << ", pretul de " << produs1.getPretProdus() << " lei si greutatea de " << produs1.getGreutateProdus() << " kg. El este disponibil in numar de " << produs1.getCantitateDisponibila()<< " bucati si este distribuit de magazinul " << produs1.getNumeMagazin()<< ". In total au fost inregistrate " << produs1.getNrProduseComandate() << " produse." << endl;
	delete[]numeProdus1;


	Magazin magazin4;
	magazin4 = magazin2;
	cout << magazin4;
	cout << magazin2[2]<<endl;
	if (magazin2 < magazin3)
		cout << "Magazinul " << magazin3.getNumeMagazin() << " vinde mai multe produse."<<endl;
	else
		cout << "Magazinul " << magazin2.getNumeMagazin() << " vinde mai multe produse."<<endl;
	cout << magazin2;


	Client client4;
	client4 = client2;
	client4.afisare();
	string* produseComandate2 = new string[3];
	produseComandate2[0] = "crema de ochi";
	produseComandate2[1] = "demachiant";
	produseComandate2[2] = "ruj";
	int* cantitateProduseComandate2 = new int[3];
	cantitateProduseComandate2[0] = 1;
	cantitateProduseComandate2[1] = 3;
	cantitateProduseComandate2[2] = 2;
	Client client5("Ioana", 3, produseComandate2, cantitateProduseComandate2);
	client3 = client2 + client5;
	client3.afisare();
	delete[]produseComandate2;
	delete[]cantitateProduseComandate2;
	cin >> client1;
	client1.afisare();
	if (client2 == client3)
		cout << "Clientul"<<client2.getNumeClient()<<" a comandat de mai multe ori."<<endl;
	else
		cout << "Clientii sunt diferiti."<<endl;


	ProdusComandat produs4;
	produs4 = produs2;
	produs4.afisare();
	produs2 -= 10;
	produs2.afisare();
	if (produs2 > produs3)
		cout << "Produsul " << produs2.getNumeProdus() << " este mai scump."<<endl;
	else
		cout << "Produsul " << produs3.getNumeProdus() << " este mai scump."<<endl;
	++produs3;
	produs3.afisare();

	Magazin* vectorMagazine = new Magazin[3];
	for (i = 0; i < 3; i++)
		cin >> vectorMagazine[i];
	for (i = 0; i < 3; i++)
		cout << vectorMagazine[i];
	delete[]vectorMagazine;

	Client* vectorClienti = new Client[2];
	for (i = 0; i < 2; i++)
		cin >> vectorClienti[i];
	for (i = 0; i < 2; i++)
		cout << vectorClienti[i];
	delete[]vectorClienti;

	ProdusComandat* vectorProduse = new ProdusComandat[4];
	for (i = 0; i < 4; i++)
		cin >> vectorProduse[i];
	for (i = 0; i < 4; i++)
		cout << vectorProduse[i];
	delete[]vectorProduse;

	ProdusComandat** matriceProduse = new ProdusComandat * [3];
	for (i = 0; i < 3; i++)
		matriceProduse[i] = new ProdusComandat[2];
	for (i = 0; i < 3; i++)
		for (int j = 0; j < 2; j++)
			cin >> matriceProduse[i][j];
	for (i = 0; i < 3; i++)
		for (int j = 0; j < 2; j++)
			cout << matriceProduse[i][j];
	for (i = 0; i < 3; i++)
		delete[]matriceProduse[i];
	delete[]matriceProduse;
}
